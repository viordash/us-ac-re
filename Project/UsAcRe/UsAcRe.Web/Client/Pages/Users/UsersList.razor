@page "/users"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using UsAcRe.Web.Shared.Models
@using System.Diagnostics;

@inject HttpClient Http
@inject DialogService DialogService

<h1>List of users</h1>

<RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@AddRecord" />
<RadzenDataGrid @ref="usersGrid" Count="@count" Data="@users"
                AllowSorting="true" AllowFiltering="true" AllowPaging="true"
                FilterMode="FilterMode.Advanced"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                SelectionMode="DataGridSelectionMode.Single"
                PageSize="10" TItem="UserModel"
                LoadData="@LoadData"
                RowDoubleClick="@OpenEditor"
                @bind-Value=@selectedUsers>
    <Columns>
        <RadzenDataGridColumn TItem="UserModel" Property="Id" Title="Id" Filterable="false" Visible="true" />
        <RadzenDataGridColumn TItem="UserModel" Property="UserName" Title="UserName" />
        <RadzenDataGridColumn TItem="UserModel" Property="Email" Title="Email" />
        <RadzenDataGridColumn TItem="UserModel" Property="Roles" Title="Roles">
            <Template Context="user">
                @string.Join(", ", user.Roles)
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<UserModel> usersGrid;
    IEnumerable<UserModel> users;
    IList<UserModel> selectedUsers;
    int count;

    async Task LoadData(LoadDataArgs args) {
        try {
            var response = await Http.PostAsJsonAsync("/users/paged", new DataPaging() {
                Filter = args.Filter,
                OrderBy = args.OrderBy,
                Top = args.Top,
                Skip = args.Skip,
            });
            users = await response.Content.ReadFromJsonAsync<IEnumerable<UserModel>>();
            count = users.Count();
            selectedUsers = users.Take(1).ToList();
            await InvokeAsync(StateHasChanged);
        } catch(AccessTokenNotAvailableException exception) {
            exception.Redirect();
        }
    }

    async Task OpenEditor(DataGridRowMouseEventArgs<UserModel> args) {
        var result = await DialogService.OpenAsync<Pages.Users.EditUser>($"Edit user {args.Data}",
            new Dictionary<string, object>() { { "UserId", args.Data.Id } });
        if(result is UserModel) {
            await usersGrid.Reload();
        }
    }


    async Task AddRecord() {
        var result = await DialogService.OpenAsync<Pages.Users.EditUser>($"Create new user");
        if(result is UserModel) {
            await usersGrid.Reload();
        }
    }
}
