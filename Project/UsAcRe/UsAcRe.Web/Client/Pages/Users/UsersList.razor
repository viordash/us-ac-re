@page "/users"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using UsAcRe.Web.Shared.Models
@using System.Diagnostics;

@inject HttpClient Http
@inject DialogService DialogService

<h1>List of users</h1>

<RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@AddRecord" />
<RadzenGrid @ref="usersGrid" Count="@count" Data="@users"
            AllowSorting="true" AllowFiltering="true" AllowPaging="true"
            SelectionMode="DataGridSelectionMode.Multiple"
            PageSize="10" TItem="UserModel"
            LoadData="@LoadData"
            RowDoubleClick="@OpenEditor">
    <Columns>
        <RadzenGridColumn TItem="UserModel" Property="Id" Title="Id" Filterable="false" Visible="true" />
        <RadzenGridColumn TItem="UserModel" Property="UserName" Title="UserName" />
        <RadzenGridColumn TItem="UserModel" Property="Email" Title="Email" />
        <RadzenGridColumn TItem="UserModel" Property="Role" Title="Role" />
    </Columns>
</RadzenGrid>

@code {
    RadzenGrid<UserModel> usersGrid;
    IEnumerable<UserModel> users;
    int count;

    async Task LoadData(LoadDataArgs args) {
        try {
            var response = await Http.PostAsJsonAsync("/users/paged", args);
            users = await response.Content.ReadFromJsonAsync<IEnumerable<UserModel>>();
            count = users.Count();
            await InvokeAsync(StateHasChanged);
        } catch(AccessTokenNotAvailableException exception) {
            exception.Redirect();
        }
    }

    async Task OpenEditor(UserModel user) {
        await DialogService.OpenAsync<EditUser>($"User {user}",
            new Dictionary<string, object>() { { "UserId", user.Id } },
                        new DialogOptions() { Width = "700px", Height = "530px" });

    }


    void AddRecord() {
        //    ordersGrid.InsertRow(new Order());
    }
}
